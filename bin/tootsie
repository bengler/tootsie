#!/usr/bin/env ruby

$:.unshift(File.expand_path('../../lib', __FILE__))
require 'tootsie'

num_workers = 4
config_path = nil
log_target = 'syslog'

ARGV.options do |opts|
  opts.banner = "Usage: #{File.basename($0)} [OPTIONS] [start | stop | restart | status]"
  opts.separator ""
  opts.on("-n", "--num-workers=WORKERS", Integer,
    "Specify number of workers to fork (defaults to #{num_workers}.") do |value|
    num_workers = [1, value.to_i].max
  end
  opts.on("-c", "--config=PATH", String,
    "Specify configuration path.") do |value|
    config_path = value
  end
  opts.on("-l TARGET", "--logger TARGET", String,
    "Log to TARGET, which is either a file name or 'syslog'.") do |value|
    log_target = value
  end
  opts.on("-h", "--help", "Show this help message.") do
    puts opts
    exit
  end
  opts.parse!
  if ARGV.empty?
    puts "Nothing to do. Run with -h for help."
    exit
  end
end

unless config_path
  abort 'Configuration file not specified.'
end
config_path = File.expand_path(config_path)

case log_target
  when 'syslog'
    logger = SyslogLogger.new('tootsie')
  else
    logger = Logger.new(log_target)
end

controller = Tootsie::Daemon.new(
  :root => File.join(File.dirname(__FILE__), "/.."),
  :pid_file => File.join(File.dirname(__FILE__), "/../tmp/task_manager.pid"),
  :logger => logger)

spawner = Spawner.new(:num_children => num_workers, :logger => controller.logger)

controller.on_spawn do
  $0 = "tootsie: master"
  spawner.on_spawn do
    $0 = "tootsie: worker"
    Signal.trap('TERM') do
      exit(2)
    end
    app = Tootsie::Application.new(:logger => controller.logger)
    app.configure!(config_path)
    begin
      app.task_manager.run!
    rescue SystemExit, Interrupt
    end
  end
  spawner.run
end
controller.on_terminate do
  spawner.terminate
end
controller.control(ARGV)
